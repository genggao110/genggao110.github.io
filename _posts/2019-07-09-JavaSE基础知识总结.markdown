---
layout:      post
title:       "JavaSE 基础知识总结"
subtitle:    " \"Java core knowledge\""
date:        2019-07-09 08:54:26
author:      "Ming"
header-img:  "img/post-bg-universe.jpg"
catalog: true
tags:
    - JAVASE
    - Knowledge
---

> "There are no secrets to success. It is the result of preparation, hard work and learning from failure."

### 1. 编译型语言与解释性语言的概念和区别

首先，我们实际上大部分编程都是用高级语言，计算机不能直接理解高级语言，只能够理解和运行机器语言，所以必须要把高级语言**翻译**成机器语言，计算机才能运行高级语言所编写的程序。说到翻译，其实翻译的方式有两种：一种是编译，一种是解释。两种方式只是翻译的时间不同。

#### 1.1 编译型语言

概念：程序(源程序)在执行之前需要编译过程，把程序编译(通过编译系统把高级语言进行翻译为机器语言)成为机器语言的文件，运行时不需要重新编译，直接使用编译的结果。给出一个用C编写的程序hello.c的编译过程：

![编译过程](https://img-blog.csdn.net/20131124170842718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemh1X3h1bg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)

一般需要经过编译、链接这两个步骤。编译是指将源代码编译成机器码，而链接是把各个模块的机器码(包括标准库)链接起来生成可执行文件。(其过程可分为四个阶段：预处理阶段，编译阶段，汇编阶段，链接阶段)

优点：编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高(但是也不能一概而论，因为部分解释型语言的解释器在运行时能动态优化代码，甚至使得解释型语言的性能不低于编译型语言)。所以像开发操作系统，大型应用程序，数据库系统等时都采用它，比如C++/C、Pascal/Obejct Pascal 等都是编译语言。

缺点：编译之后如果需要修改就需要将整个模块重新编译。编译时会根据运行环境生成对应的机器码，不同操作系统之间移植较困难。目标程序不具有移植性，源程序可以移植。

#### 1.2 解释型语言

概念： 解释型语言是相对于编译性语言存在，源程序不需要编译，源程序在运行时才翻译成机器语言，每执行一次需要翻译一次。先翻译成中间代码，由解释器运行(中间代码与机器代码是不同的，用解释型语言编写的程序是由另一个可以理解中间代码的解释程序执行的。**与编译程序不同的是，解释器的任务是逐一将源程序的语句解释成可执行的机器代码，不需要将源程序翻译成目标代码再执行**)。

优点：有良好的平台兼容性，在任何环境下都可以运行，只要安装了解释器。修改代码时直接修改即可，可以快速部署，不用停机维护。一些网页脚本，服务器脚本以及辅助开发接口这样的对素对要求不高、对不同系统平台间的兼容性有一定要求的程序则通常使用解释型语言，如JavaScript，VBScript，Perl，Python，Ruby，MATLAB等。

缺点：每次运行的时候都要解释一遍，性能上相较于编译型语言逊色。但是也不是一概而论的，部分解释型语言的解释器通过运行时动态优化代码，甚至能够使解释型语言的性能不低于编译型语言。

#### 1.3 Java与C#语言

**JAVA语言**

> Java语言是一种混合型语言(编译加解释型)，同时具备编译特性与解释特性(其实，确切地说JAVA就是解释型语言，其所谓的编译过程只是将.java文件编译成平台无关的字节码.class文件，并不是像C一样编译成可执行的机器语言)。作为编译型语言，JAVA程序要被统一编译成字节码文件(文件后缀是.class，这种文件在java中又称为类文件)。java字节码文件不能在计算机上直接执行，它需要被JAVA虚拟机翻译成本地的机器码后才能执行，而Java虚拟机的翻译过程则是解释型的。

Java的字节码文件首先被加载到计算机内存里，然后读出一条指令，翻译一条指令，执行一条指令，该过程被称为java语言的解释执行，是由java虚拟机(JVM, Java Virtual Machine)完成的。在现实中，java开发工具JDK提供了两个重要的命令来完成上面的编译和解释过程：javac.exe和java.exe。前者对源文件进行编译生成字节码文件，后者是加载字节码文件解释成机器码。(**补充**：常见的JVM例如Hotspot虚拟机，都提供了JIT(just in time)机制，此机制被称为动态编译机制，它可以将反复执行的热点代码直接编译成机器码，这种情况下部分热点代码的执行就属于编译执行，而不是解释执行了。)

**C#语言**

> C#语言是编译型语言，但是其“编译”过程比较特殊。C#程序在第一次运行的时候，会依赖其.NET Framework平台，编译成IL中间码，然后由JIT compiler翻译成本地的机器码执行。从第二次在运行相同的程序，则不需要再执行以上编译和翻译过程，而是直接运行第一次翻译成的机器码。所以对于C#程序而言，通常第一次运行时间会很长，但从第二次开始，程序的执行时间会快很多。

为什么C#要进行两次“编译”？其实，微软想通过动态编译(由JIT compiler)来实现程序运行的最优化。如果代码在运行前进行动态编译运行，那么JIT compiler可以很智能的根据你本地机器的硬件条件来进行优化，比如使用更好的register，机器指令等等。

### 2. 







