---
layout:     post
title:      "Nginx学习"
subtitle:   " \"Nginx内容介绍\""
date:       2019-10-25 21:25:20
author:     "ming"
catalog: true
header-img: "img/post-bg-mylove.jpg"
tags:
    - Nginx
---

> "Sometimes there is no next time, no time-outs, no second chances; sometimes it's now or never."

## 1. 基本功能介绍

Nginx在不依赖第三方模块的情况下只要能做些什么呢？
- 反向代理
- 负载均衡
- HTTP服务器(动静分离)
- 正向代理

### 1.1 反向代理

反向代理应该算是Nginx做的最多的一件事情了。什么是反向代理？百度百科上面是这样给出定义的：反向代理(Reverse Proxy)方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给网路上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。

简单来说就是真实的服务器并不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。

下面贴上一段简单的实现反向代理的代码：

![反向代理案例](https://tva2.sinaimg.com/large/005CDUpdgy1g8hn5wcc62j30cb05sq4g.jpg)

保存配置文件后启动Nginx，这样当我们访问localhost的时候，就相当于访问localhost:8080

### 1.2 负载均衡

负载均衡的意思是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其他关键任务服务器等，从而共同完成工作任务。简单而言当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。而Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略。

#### 1. RR(默认)

每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。

简单配置如下：

![RR规则](https://tva2.sinaimg.com/large/005CDUpdgy1g8hnbure9fj30b607g766.jpg)

其核心代码为：

```json
upstream test{
    server localhost:8080;
    server localhost:8081;
}
```
这里我配置了2台服务器，当然实际上是一台，只是端口不一样而已，而8081的服务器是不存在的,也就是说访问不到，但是我们访问http://localhost 的时候,也不会有问题，会默认跳转到http://localhost:8080 具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置。

#### 2. 权重

指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均匀的情况。

```json
upstream test{
    server localhost:8080 weight=9;
    server localhost:8081 weight=1;
}
```
那么10次一般只会有1次访问到8081，有9次会访问到8080.

#### 3. ip_hash

上面的2种方式都有一个问题，那就是下一个请求来的时候可能分发到另外一个服务器，当我们的程序不是无状态的时候(采用了session保存数据)，这时候就有很大一个问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，就可以解决session的问题。

```json
upstream test{
    ip_hash;
    server localhost:8080;
    server localhost:8081;
}
```

#### 4. fair(第三方)

按后端服务器的响应时间来分配请求，响应时间短的优先分配。

```json
upstream test{
    fair;
    server localhost:8080;
    server localhost:8081;
}
```

#### 5. url_hash(第三方)

按访问url的hash结果来分配请求，使得每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。

```json
upstream test{
    hash $request_uri;
    hash_method crc32;
    server localhost:8080;
    server localhost:8081;
}
```
以上5种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式,不过fair和url_hash需要安装第三方模块才能使用。

### 1.3 HTTP服务器

Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也流行动静分离，就可以通过Nginx来实现。先来看看Nginx做静态资源服务器：

```json
server {
    listen       80;
    server_name  localhost;
    client_max_body_size  1024M;

    location / {
        root e:\wwwroot;
        index index.html;
    }
}
```
这样如果访问http://localhost 就会默认访问到E盘wwwroot目录下面的index.html，如果一个网站只是静态页面的话，那么就可以通过这种方式来实现部署。

### 1.4 动静分离

动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。

```json
upstream test{
    server localhost:8080;
    server localhost:8081;
}

    server {
        listen        80;
        server_name   localhost;

        location / {
            root  e:\wwwroot;
            index index.html;
        }

        # 所有静态请求都由nginx处理，存放目录为wwwroot
        location ~ \.(gif|jpg|jpeg|png|bmp|swf|css|js)$ {
            root e:\wwwroot;
        }

        # 所有动态请求都转发给tomcat处理
        location ~ \.(jsp|do)$ {
            proxy_pass http://test;
        }

        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
            root e:\wwwroot;
        }
    }
```

我们这样我们就可以吧HTML以及图片和css以及js放到wwwroot目录下，而tomcat只负责处理jsp和请求，例如当我们后缀为gif的时候，Nginx默认会从wwwroot获取到当前请求的动态图文件返回，当然这里的静态文件跟Nginx是同一台服务器，我们也可以在另外一台服务器，然后通过反向代理和负载均衡配置过去就好了，只要搞清楚了最基本的流程，很多配置就很简单了，另外localtion后面其实是一个正则表达式，所以非常灵活。

### 1.5 正向代理

正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并制定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。

```json
    resolver 114.114.114.114 8.8.8.8;
    server {
        resolver_timeout 5s;

        listen 81;

        access_log  e:\wwwroot\proxy.access.log;
        error_log   e:\wwwroot\proxy.error.log;

        location / {
            proxy_pass http://$host$request_uri;
        }
    }
```

resolver是配置正向代理的DNS服务器，listen 是正向代理的端口。

> 正向代理和反向代理的区别：1、正向代理：类似我们想要访问国外的Google服务器，但是由于访问限制，我们需要找一个代理去访问。换句话说，客户端明确知道要访问的服务器的地址，客户端把请求发送给代理，代理转发给服务器，服务器把响应传给代理，最后代理把响应传给客户端。我们可以看到客户端知道服务器是谁，但是服务器并不知道客户端是谁，这就是正向代理，隐藏了客户端的真实信息。2、反向代理：类似我们访问淘宝，由于访问量巨大，淘宝会使用许多台服务器（就是分布式服务器）来支持，但是每个客户端的请求到底由哪一台服务器来响应，我们需要一个代理来决定。换句话说，客户端并不知道要把请求发送给哪一台服务器，但是知道发送给哪一个代理，然后代理依据规则（响应时间，负载均衡等）决定把请求转发给哪一台服务器。可以看到，客户端并不知道他访问的服务器是谁，这就是反向代理，隐藏了服务器的真实信息。